@namespace MyComponents.AddCocktail
@inject CircleHospitalityContext Context
@rendermode InteractiveServer
@using MyComponents.ItemTypeDropdown
@using MyComponents.IngredientList
@using MyComponents.FormModels.MenuItemFormModel
@using System
@using System.Linq
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomLeft" AutoHide="true" Delay="5000"/>

<div class="container text-center">
    <div class="row">
        <div class="col">
            <div class="container text-center">
                <EditForm Model="model" FormName="MenuItemForm" method="post" OnValidSubmit=@Submit>
                    <DataAnnotationsValidator />
                    
                    <div asp-validation-summary="All" class="text-danger"></div>

                    <div class="row mb-3">
                        <div class="col text-end">
                            <label asp-for="itemName" class="form-label">Name:</label>
                        </div>

                        <div class="col text-start">
                            <InputText @bind-Value=model.ItemName />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-end">
                            <label for="description" class="form-label">Description:</label>
                        </div>
                        <div class="col text-start">
                             <InputText @bind-Value=model.ItemDescription />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-end">
                            <label for="creatorName" class="form-label">Creator:</label>
                        </div>
                        <div class="col text-start">
                            <InputText @bind-Value=model.CreatorName />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-end">
                            <label for="price" class="form-label">Price:</label>
                        </div>
                        <div class="col text-start">
                            <InputNumber @bind-Value="@model.Price" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-end">
                            <label class="form-label">Allergens:</label>
                        </div>
                        <div class="col text-start">
                            <div class="container text-center">
                                <div class="row">
                                    <div class="col text-start">
                                        <InputCheckbox @bind-Value="@model.HasDairy" />
                                        <label for="hasDairy" class="form-label ms-2">Has Dairy</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col text-start">
                                        <InputCheckbox @bind-Value="@model.HasEgg" />
                                        <label for="hasEgg" class="form-label ms-2">Has Egg</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col text-end">
                            <label class="form-label">Available at:</label>
                        </div>
                        <div class="col">
                            <div class="container text-center">
                                <div class="row">
                                    <div class="col text-start">
                                        <InputCheckbox @bind-Value="@IsAtSVI" />
                                        <label for="IsAtSVI" class="form-label ms-2">Sundry - Indy</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col text-start">
                                        <InputCheckbox @bind-Value="@IsAtSVC" />
                                        <label for="availSVC" class="form-label ms-2">Sundry - Cincy</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col text-start">
                                        <InputCheckbox @bind-Value="@IsAtCS" />
                                        <label for="availCS" class="form-label ms-2">Comfort - Cincy</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col text-end">
                            <label class="form-label">Cocktail Type:</label>
                        </div>
                        <div class="col text-start">
                            <InputSelect @bind-Value="@model.ItemTypeID">
                                @foreach (var itemType in (from IT in Context.ItemTypes
                                                      select new {IT.ItemTypeID, IT.ItemTypeDescription}))
                                {
                                    <option value=@itemType.ItemTypeID>@itemType.ItemTypeDescription</option>
                                }
                            </InputSelect>
                        </div>
                    </div>


                    <div class="row mb-3">
                        <div class="col text-start">
                            <label class="form-label">Ingredient List:</label>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col text-end">
                            <IngredientList ingredientMeasurements="ingredientList"/>
                        </div>
                    </div>
                    <button type="submit">submit</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    MenuItemFormModel model { get; set; } = new MenuItemFormModel();

    List<ToastMessage> messages = new List<ToastMessage>();

    public List<IngredientList.IngredientMeasurements> ingredientList = new List<IngredientList.IngredientMeasurements> { };

    public bool IsAtSVI { get; set; }
    public bool IsAtSVC { get; set; }
    public bool IsAtCS { get; set; }

    private void showSuccess() => messages.Add(createToastMessage());

    private ToastMessage createToastMessage()
        => new ToastMessage
            {
                Type = ToastType.Dark,
                Message = "Item Submitted!"
            };

    public void Submit()
    {
        MenuItem newMenuItem = new MenuItem
            {
                ItemName = model.ItemName,
                ItemDescription = model.ItemDescription,
                CreatorName = model.CreatorName,
                ItemTypeID = model.ItemTypeID
            };
        LocationMenu newLocationMenu = new LocationMenu
            {
                Price = model.Price,
                HasEgg = model.HasEgg,
                HasDairy = model.HasDairy
            };

        Context.MenuItems.Add(newMenuItem);
        Context.SaveChanges();

        foreach (IngredientList.IngredientMeasurements ingredient in ingredientList)
        {
            ItemIngredient newItemIngredient = new ItemIngredient {
                    MenuItemID = newMenuItem.MenuItemID,
                    IngredientID = ingredient.measureIngredientID,
                    MeasurementID = ingredient.measureTypeID,
                    MeasurementAmount = ingredient.measurementAmount
                };
            Context.ItemIngredients.Add(newItemIngredient);
            Context.SaveChanges();
        }

        if (IsAtSVI)
        {
            newLocationMenu.LocationID = 1;
            newLocationMenu.MenuItemID = newMenuItem.MenuItemID;
            Context.LocationMenus.Add(newLocationMenu);
            Context.SaveChanges();
        }

        if (IsAtSVC)
        {
            newLocationMenu.LocationID = 2;
            newLocationMenu.MenuItemID = newMenuItem.MenuItemID;
            Context.LocationMenus.Add(newLocationMenu);
            Context.SaveChanges();
        }

        if (IsAtCS)
        {
            newLocationMenu.LocationID = 3;
            newLocationMenu.MenuItemID = newMenuItem.MenuItemID;
            Context.LocationMenus.Add(newLocationMenu);
            Context.SaveChanges();
        }
        showSuccess();
        model = new MenuItemFormModel();
        IsAtSVI = false;
        IsAtSVC = false;
        IsAtCS = false;
        ingredientList = new List<IngredientList.IngredientMeasurements> { };
    }
}