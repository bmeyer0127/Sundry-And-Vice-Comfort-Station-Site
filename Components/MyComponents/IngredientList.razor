@namespace MyComponents.IngredientList
@rendermode InteractiveServer
@inject CircleHospitalityContext Context
@using System
@using System.Collections.Generic
@using System.Collections
@using System.Linq
@using MyComponents.AddCocktail
<div class="container border border-dark rounded p-0 mb-3">

    <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomLeft" AutoHide="true" Delay="5000" />

    <input type="text" class="form-control-sm w-100" placeholder="search" @bind="searchInput" @bind:event="oninput"/>

    <div class="list-group overflow-auto" style="max-height: 150px; min-height: 150px">
        <ul class="ps-0">
            @foreach (Ingredient ingredient in Context.Ingredients.Where(i => i.IngredientName!.Contains(searchInput)).OrderBy(i => i.IngredientName))
            {
                <li class="list-group-item text-start" >
                    <button 
                        class="btn btn-outline-primary me-2" 
                        type="button" 
                        id="@ingredient.IngredientID"
                        value="@ingredient.IngredientID" 
                        @onclick ="() => addIngredient(ingredient.IngredientID)">
                        Add
                        </button>
                    <label 
                        class="form-check-label"
                        for="@ingredient.IngredientID">
                        @ingredient.IngredientName
                        </label>
                </li>
            }
        </ul>
    </div>
</div>
<div class="container border border-dark rounded p-0">
    <div class="list-group overflow-auto" style="max-height: 150px; min-height: 150px">
        @if (ingredientMeasurements != null)
        {
            foreach (IngredientMeasurements ingredient in ingredientMeasurements)
            {
                <div class="list-group-item d-flex p-0">
                    <div class="container">
                        <div class="row justify-content-start">
                            <div class="col-4 text-start">
                                <label class="form-check-label">
                                    @Context.Ingredients.Where(ing => ing.IngredientID == ingredient.measureIngredientID).Select(ing => ing.IngredientName).First()
                                </label>
                            </div>
                            <div class="col-3">
                                <InputNumber TValue="float" @bind-Value="ingredient.measurementAmount" class="w-100" />
                            </div>
                            <div class="col-3 p-1">
                                <InputSelect @bind-Value="ingredient.measureTypeID" class="w-100">
                                    @foreach (var measurement in (from M in Context.Measurements select new { M.MeasurementDescription, M.MeasurementID }))
                                    {
                                        <option value=@measurement.MeasurementID>@measurement.MeasurementDescription</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-2 text-end">
                                <button type="button" class="btn btn-outline-danger btn-sm btn-close" @onclick="() => removeIngredient(ingredient.measureIngredientID)"/>
                            </div>
                        </div>
                    </div>
                </div>
        }
        }
        </div>
    
</div>



@code {
    string searchInput = "";

    List<ToastMessage> messages = new List<ToastMessage>();

    [Parameter]
    public List<IngredientMeasurements>? ingredientMeasurements { get; set; }

    public class IngredientMeasurements
    {
        public int measureIngredientID { get; set; }
        public int measureTypeID { get; set; }
        public float measurementAmount { get; set; }
    }

    public void addIngredient(int ingredientID)
    {
        if (ingredientMeasurements != null)
        {
            foreach (IngredientMeasurements item in ingredientMeasurements)
            {
                if (item.measureIngredientID == ingredientID)
                {
                    showDuplicateIngredient();
                    return;
                }
            }
            ingredientMeasurements.Add(new IngredientMeasurements { measureIngredientID = ingredientID });
        }
    }

    public void removeIngredient(int ingredientID)
    {
        if (ingredientMeasurements != null)
        {
            ingredientMeasurements.RemoveAt(ingredientMeasurements.IndexOf(ingredientMeasurements.Single(item => item.measureIngredientID == ingredientID)));
        }
    }

    private void showDuplicateIngredient() => messages.Add(createToastMessage());

    private ToastMessage createToastMessage()
        => new ToastMessage
            {
                Type = ToastType.Dark,
                Message = "You already added this ingredient"
            };
}
